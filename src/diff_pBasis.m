function out = diff_pBasis(pBasis,n_diff)
%diff_pBasis - differentiation of polynomial basis
%
% out = diff_pBasis(pBasis,n_int)
%   pBasis  : polynomial basis generated by polySolve
%   n_int   : order of differentiation
%   out     : differentiated polynomial basis
%             see outPolyBasis
% Author    : Wataru Ohnishi, University of Tokyo, 2020
%%%%%

if nargin < 2, n_diff = 1; end

while n_diff > 0
    pBasis = diff_pBasis_main(pBasis);
    n_diff = n_diff -1;
end
out = pBasis;
% check order
nofpoly = length(pBasis);
Nzero = cellfun(@(x)length(nonzeros(x.a_vpas(1,:))),pBasis);
if sum(Nzero) <= nofpoly % order of all the segments <= 0
    error('derivative is incorrect! (insufficient order)')
end
end

function out = diff_pBasis_main(pBasis)
if ~iscell(pBasis), pBasis = {pBasis}; end
nofpoly = length(pBasis); % number of trajectory segments
out = cell(1,nofpoly);
for k = 1:nofpoly
    out{k}.BCt = pBasis{k}.BCt;
    out{k}.a_vpas = [pBasis{k}.a_vpas(2:end,:);...
        polydiff(pBasis{k}.a_vpas(end,:))];
    out{k}.a_syms = [pBasis{k}.a_syms(2:end,:);...
        polydiff(pBasis{k}.a_vpas(end,:))];
    out{k}.BC0 = [pBasis{k}.BC0(2:end,:);...
        polyval(double(out{k}.a_syms(end,:)),out{k}.BCt(1));];
    out{k}.BC1 = [pBasis{k}.BC1(2:end,:);...
        polyval(double(out{k}.a_syms(end,:)),out{k}.BCt(2));];
    out{k} = orderfields(out{k});    
end
end